@page "/Kits/{id}"
@page "/Kits/new"
@attribute [Authorize(Roles = "admin")]
@inject IRepository repository
@inject IJSRuntime JS
@inject ClientImageService clientImages

@if (Kit != null)
{
    <h3>Kit Details :: @Kit.Name</h3>

    <div class="row">
        <EditForm Model="Kit">
            <div class="form-group">
                <label for="kitName">Kit Name</label>
                <input type="text" class="form-control" name="kitName" @bind="@Kit.Name">
            </div>
            <div class="form-group">
                <label for="kitDescription">Description</label>
                <textarea rows="4" class="form-control" name="kitDescription" @bind="@Kit.Description">
                </textarea>
            </div>
            <div class="form-group">
                <label for="iconUrl">Icon Url</label>

                <InputSelect id="iconUrl" class="form-control" @bind-Value="Kit.IconUrl">
                    @foreach (var image in clientImages.Images)
                    {
                    <option value="@image.RelativePath">@image.RelativePath</option>
                    }
            </InputSelect>
            <img src="@clientImages.ToAbsolutePath(Kit.IconUrl)" />

        </div>
    </EditForm>
</div>

    <div class="card-columns">

        @foreach (var item in Kit.Items)
        {
            <KitItemDisplay Item="@item"></KitItemDisplay>
        }

    </div>
    <button class="btn btn-primary" @onclick="AddKitItem">Add Item</button>
    <button class="btn btn-primary" @onclick="SaveBaseKit">Save Kit</button>
}
else
{
    <p>Loading...</p>
}


@code {

    [Parameter]
    public string Id { get; set; }

    public BaseKit Kit { get; set; }

    public void AddKitItem()
    {
        if (Kit != null && Kit.Items != null)
        {
            Kit.Items.Add(new BaseKitItem { Id = Guid.NewGuid().ToString() });
        }
    }

    public async Task SaveBaseKit()
    {
        if (Kit != null)
        {
            if (string.IsNullOrEmpty(Kit.Id))
            {
                Kit = await repository.CreateBaseKit(Kit);
            }
            else
            {
                Kit = await repository.SaveBaseKit(Kit);    
            }

            await JS.InvokeVoidAsync("alert", new object[] { "Base Kit Saved" });
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Id))
        {
            Kit = new BaseKit();
        }
        else
        {
            Kit = await repository.GetBaseKitById(Id);
        }
        await base.OnInitializedAsync();
    }

}
